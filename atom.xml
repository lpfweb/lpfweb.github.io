<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李鹏飞的博客</title>
  <subtitle>学而不思则罔，思而不学则殆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lpfweb.github.io/"/>
  <updated>2016-04-04T11:26:36.000Z</updated>
  <id>http://lpfweb.github.io/</id>
  
  <author>
    <name>Li Pengfei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS区分浏览器中页面刷新与关闭标签页</title>
    <link href="http://lpfweb.github.io/2016/04/04/JS%E5%8C%BA%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
    <id>http://lpfweb.github.io/2016/04/04/JS区分浏览器中页面刷新与关闭/</id>
    <published>2016-04-04T08:25:10.000Z</published>
    <updated>2016-04-04T11:26:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Web开发者在系统开发中经常要面对产品经理各式各样的需求，当然，大部分对产品体验还是有帮助的，例如我们今天提到的刷新页面，前进后退，关闭浏览器标签时，为了避免用户误操作，需给出二次确认提示框，这个相信大家都非常熟悉了，采用浏览器提供的BOM事件机制就可以解决，使用window对象的onbeforeunload事件即可，如果产品经理只提出这样的需求，那确实无可厚非，然而其需要的不仅仅是这些…&lt;/p&gt;
&lt;p&gt;例如，我们一次项目开发中，产品经理就针对我们的实现提出了“改进方案”：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你们这弹出框太丑了，跟系统整体风格不搭调啊，不能使用咱们自己组件库中的Dialog吗？很好的问题…我只想说，you can you up…&lt;/li&gt;
&lt;li&gt;你们这刷新和关闭标签页中展示的文案一样啊，需要区分对待下，刷新提示XXX，关闭时提示SSS，这样用户才能更明确。恩，考虑到了用户的体验，很好，我还是想说，you can you up…其实，浏览器在关闭和刷新时，本身已经区别对待了，提示是不同的，只不过我们自定义的部分并不能显示不同的文案而已；当然，也有一些hack的方法，但是很难适应多个浏览器，各浏览器内部对于关闭标签页和刷新的实现机制会有所不同；&lt;/li&gt;
&lt;li&gt;你们每次登录进来，为什么要延时10秒，才让坐席签入电话系统啊（我们做的是客服系统）？能不能把这个限制去掉啊，用户体验太不好了！我们也想去掉啊，但是电话系统频繁签入签出会有问题，用户刷新了浏览器，再次签入，如果相隔时间很短的话，电话系统会出现故障，为了避免这个问题，我们才加上了这个限制，但是回过头来思考，就可以进入我们今天讨论的主题了；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;区分刷新与新登陆&quot;&gt;&lt;a href=&quot;#区分刷新与新登陆&quot; class=&quot;headerlink&quot; title=&quot;区分刷新与新登陆&quot;&gt;&lt;/a&gt;区分刷新与新登陆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们无法根据浏览器事件区分刷新还是关闭标签页，进而在相应动作触发前，执行不同的动作，但是对于上文中产品提出的第三点意见，其实还是可以考虑优化一下的，就是只有在刷新的时候延时10秒，新登录或关闭标签页一段时间之后再进来时不延时；&lt;/p&gt;
&lt;p&gt;要做到这点其实也很简单，使用浏览器的本地存储机制就可以实现，例如cookie，LocalStorage等，这里就不能使用SessionStorage了，因为本次回话结束后，该缓存就失效了；由于在cookie中存储会增加cookie的字节数，每次请求中相应的网络传输量会增加，因此，我们采用了LocalStorage；其操作很简单，我们使用的前端框架是AngularJS，具体如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MAX_WAIT_TIME = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; currentDate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lastestLeaveTime = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.getItem(&lt;span class=&quot;string&quot;&gt;&#39;lastestLeaveTime&#39;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) || currentDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.secondCounter = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(MAX_WAIT_TIME - &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil((currentDate - lastestLeaveTime) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.secondCounter &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logoutTimeInterval = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$interval(()=&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.secondCounter--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$scope.$digest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.secondCounter, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;).then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateByStatus(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.AvayaService.status.OFFLINE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateByStatus(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.AvayaService.status.OFFLINE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上面代码主要作用是，进入系统后，会先去LocalStorage中获取上次退出时的时间，再获取当前时间，两个时间进行减法，如果值小于10秒，我们就认为这是刷新，如果值大于10秒，我们认为是关闭标签页或新登录，进而可以执行不同的方法，让客服有更好的体验，不用每次进入系统都要等待10秒才能签入电话系统了，产品经理还是很重要的，吼吼，要不是他的疑问，可能我们也不会来优化这个地方了…当然，其实RD也要逐渐培养这种用户体验至上的思维，哪怕有一点可提升客服效率的地方，都值得我们花时间来优化；&lt;/p&gt;
&lt;p&gt;下面把相关退出的代码也贴一下吧，前面忘说了，不管是刷新，还是关闭标签页，只要是页面销毁，我们都会去执行登出电话系统的操作，所以每次进来后需要重新签入；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//刷新页面或者关闭页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onbeforeunload = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;操作将会导致页面数据清空，请谨慎操作...&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//每次页面unload时，设置LocalStorage时间；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onunload = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.setItem(&lt;span class=&quot;string&quot;&gt;&#39;lastestLeaveTime&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可能还注意到一些问题，那就是刷新，关闭页面，前进后退，你需要跳出浏览器默认二次确认框，但是用户点击退出系统按钮，则必须弹出自己组件库中的Dialog了，还必须不能两个都弹出，具体代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onStatusClick(index, name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name === &lt;span class=&quot;string&quot;&gt;&#39;退出&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mgDialog.openConfirm(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showClose: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      template: &lt;span class=&quot;string&quot;&gt;&#39;app/header/logoutDialog.html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      controller: &lt;span class=&quot;string&quot;&gt;&#39;HeaderDialogController as dialog&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;您确定要退出系统吗？&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href = &lt;span class=&quot;string&quot;&gt;&#39;/logout&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onbeforeunload = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 内部操作，大家不用管&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      系统开发中产品经理经常会有这样的要求，刷新页面、前进后退、关闭浏览器标签页时给出提示，避免用户误操作，尤其是在单页应用中；浏览器提供了onbeforeunload事件，可弹出提示框，给用户确认，然而浏览器并没有提供更细粒度的事件区分，无法通过浏览器提供的事件机制来判别到底是刷新，还是关闭标签页等；
    
    </summary>
    
      <category term="Web开发" scheme="http://lpfweb.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="unload" scheme="http://lpfweb.github.io/tags/unload/"/>
    
  </entry>
  
  <entry>
    <title>《Web全栈工程师的自我修养》总结（一）</title>
    <link href="http://lpfweb.github.io/2016/04/04/%E3%80%8AWeb%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lpfweb.github.io/2016/04/04/《Web全栈工程师的自我修养》总结（一）/</id>
    <published>2016-04-04T07:56:10.000Z</published>
    <updated>2016-04-04T07:56:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;花了一周时间读完了这本书，总体来说收获还是不小的，个人认为，这本书最重要的还是作者介绍的全栈思维，是思想意识层面的东西。&lt;/p&gt;
&lt;p&gt;作者的很多观点与我自身的价值观是一致的，读完本书，其实知识层面对我的帮助并不是很大，首先作者介绍的比较广泛，总共两百多页的书，知识面谈的宽泛了，必然不会很详尽；其次，作者谈到的这些知识点，其实之前都有过或多或少的接触，并不算特别新鲜了，尤其是在发展变化速度堪比做火箭的前端领域。这本书对我最大的影响，还是通过了解作者的思考方式、做事风格，印证了我之前自己的思考方式，并帮助我将思路整理的更加清晰；&lt;/p&gt;
&lt;p&gt;下面还是对该书的每一章节进行下总结；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是全栈工程师&quot;&gt;&lt;a href=&quot;#什么是全栈工程师&quot; class=&quot;headerlink&quot; title=&quot;什么是全栈工程师&quot;&gt;&lt;/a&gt;什么是全栈工程师&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;对于研发工程师来说，&lt;code&gt;栈&lt;/code&gt;就是在项目开发中所用到的技能，针对不同的项目，所用到的&lt;code&gt;栈&lt;/code&gt;也是不尽相同的，例如移动端，Web端，PC客户端等，所使用的技能栈就会有所区别，移动端又分为原生应用开发（Android &amp;amp;&amp;amp; iOS）和基于WebView的Web App，当然还有Hybrid，这些又需要不同的技能栈来提供支持；&lt;/p&gt;
&lt;p&gt;我们一般说的全栈，一般也是指在某个开发领域，能够独立完成整个项目的设计，研发，部署，当然，如果您能完全Hold住多个开发领域，能跨多域解决问题，那在大多数公司，已经可以封神了；&lt;/p&gt;
&lt;p&gt;例如Web栈，对于之前来说，可能掌握数据库（关系型或NoSQL），服务器（Linux），一或多种服务端编程语言（Java，Python，C++，PHP等），再掌握前端的一系列开发语言（HTML，CSS，JS等），那就可以自己做出一个独立的Web应用了，对于之前来说，我觉得也可以称作全栈了；但对现在来说，个人认为，这些知识还真的不够，全栈工程师应该有对整个项目的整体把控能力，技术架构设计能力，以及如今快速变化的前端工程化能力等；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Web开发流程&quot;&gt;&lt;a href=&quot;#Web开发流程&quot; class=&quot;headerlink&quot; title=&quot;Web开发流程&quot;&gt;&lt;/a&gt;Web开发流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;中大型公司，现在一般都是流水线开发流程，例如我所在的公司，目前开发流程基本是这样的：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;产品经理根据需求设计好项目原型，经过产品组内评审之后，一般会找到相关RD与UED，进行需求讲解与分析；&lt;/li&gt;
&lt;li&gt;UED团队的用研（用户研究）团队，会去做实际的用户调研，一方面确定需求的准确性，了解一线用户实际的需求点，另一方面，确定较优的交互方式，供交互设计师参考；&lt;/li&gt;
&lt;li&gt;之后，交互设计师，便开始做产品的交互，主要目标是优化用户界面的分布以及用户的操作流程，在我们团队，交互和用研是一个人；&lt;/li&gt;
&lt;li&gt;交互设计师会把设计的交互流程图，包括了界面的线框图，交给视觉设计师，视觉设计师完成视觉稿的交付；&lt;/li&gt;
&lt;li&gt;如果开发周期较紧张，一般在设计师还没交付视觉稿之前，前端工程师和后端工程师都已经对需求有了一个初步的了解，后端工程师已经开始根据产品原型设计数据库表结构，进行项目技术选型，整体服务架构设计了，前端工程师，也根据产品原型，快速确定前端技术选型，主要是前端框架的选定，前端工程目录结构生成，自动化构建task编写（目前我们使用的自动化工具有，git + yo + gulp + bower + npm）等，开发，调试，打包，压缩，混淆等都非常方便，除此之外，前端工程师还会根据此次的需求，考虑性能监控，埋点统计，SEO，兼容性等多方面知识；&lt;/li&gt;
&lt;li&gt;目前我们使用的都是前后端分离的方案，所以开发过程中，前后端只需约定好API，便可独立开发，互不影响进度；&lt;/li&gt;
&lt;li&gt;开发完成后，便是前后端联调，交由QA测试，修改bug，交由产品验收，交由UED进行视觉交互验收，通过后，便可部署到生产环境，发布上线；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在项目开发中，一般都使用一些敏捷管理工具，例如我们使用过Jira的看板和scrum，目前在使用Tapd，比较轻量级，能够满足业务快速迭代的需要；&lt;/p&gt;
&lt;p&gt;模块化的Web开发流程，流水线式的职业化分和流程管理，提高了项目的可靠性，可用性，以及团队的可管理性；也造成了一些问题，任务分配后，一些工程师就只考虑自己手头上的工作，认为把自己“分内”的事做完，做好，就算完事了，其他人工作出了问题，跟自己没关系，我所在的大团队也确实有这样的人，其实这是对产品整体缺乏责任感的一种表现，没有理解清楚自己最终的目标是什么，我们的目标一定是让自己负责的产品更好，而不仅仅是自己负责的模块，工程师一定要对产品整体有自己的理解和贡献，从全局视角考虑问题，大的目标理解透彻了，任务模块才能做得更优；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;全栈工程师的发展前景&quot;&gt;&lt;a href=&quot;#全栈工程师的发展前景&quot; class=&quot;headerlink&quot; title=&quot;全栈工程师的发展前景&quot;&gt;&lt;/a&gt;全栈工程师的发展前景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在此章节中，作者阐述了全栈工程师的能力以及对应的发展，例如，一专多长，首先专精一个方向，在这个方向上有足够的积累，足够的深度之后，以此为突破点，去学习更多的知识，“多长”是在不断解决问题的过程中逐步积累下来的，而不是一蹴而就的过程；工程师最重要的能力是发现问题，解决问题的能力，而不只是醉心技术；&lt;/p&gt;
&lt;p&gt;虽然现在公司级产品的复杂度已经远超出一个工程师的能力范围，一般都是通过团队协作来完成，但全栈工程师仍然是公司招聘的首选目标，全栈工程师对整个开发流程都有着深入的理解，相对地，会从全局考虑，选择更合适的技术，更合适的方案来实现自己负责的模块，而且往往让上下游同事配合起来更加轻松，因为上下游的工作，自己了然于心，更清楚知道别人需要什么，团队需要什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何成为全栈工程师&quot;&gt;&lt;a href=&quot;#如何成为全栈工程师&quot; class=&quot;headerlink&quot; title=&quot;如何成为全栈工程师&quot;&gt;&lt;/a&gt;如何成为全栈工程师&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作者给出了几点建议：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;先精后广，一专多长；建议先将自己工作中用到的技能栈有足够深入的研究之后，再去学习与其相关的知识点，点连成面，才能够解决更大的问题，如果各个点之间是孤立无援的，则时间久了，基本都会忘记了；&lt;/li&gt;
&lt;li&gt;围绕商业目标；技术总是服务于商业目标的，我们对公司的价值，就是直接或间接的为公司赚钱，减少成本或增加收入；对于我们做内部企业级软件，主要先从节约成本的角度考虑，我们做客服系统，如果能够通过优化工作流程，改进产品操作体验，提高产品稳定性，让客服用着更舒心，进而提升客服的工作效率，提升用户的满意度，不仅为公司节省了人力成本，还提升了公司的服务质量，这就是我们不断优化产品的价值；所以，做事情之前，先看清楚目前有哪些问题需要去解决，永远从商业目标的角度去考虑，来决定学习那些知识，而不是纯粹为了锻炼技术而去学习；&lt;/li&gt;
&lt;li&gt;关注用户体验；很多时候，工程师做的事情都是在优化用户体验，针对C端产品，吸引更多的用户，对于B端产品，提升效率；不同产品的用户是不一致的，关注点也不一样，所以一定要特别清楚自己产品的用户是谁，针对用户去做一系列的优化，解决用户的痛点；在该点中，作者提到了作为老板，关注的更多是项目进度和风险，而不是技术细节，沟通时，给出选择题而不是问答题；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;从学生到工程师&quot;&gt;&lt;a href=&quot;#从学生到工程师&quot; class=&quot;headerlink&quot; title=&quot;从学生到工程师&quot;&gt;&lt;/a&gt;从学生到工程师&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;该章主要是写给刚毕业的应届生，包括了校招流程，如何更好地获得面试机会，实习机会的把握等；&lt;/p&gt;
&lt;p&gt;一个好的开源项目参与者身份，确实可以为应聘者增色不少；&lt;/p&gt;
&lt;p&gt;这里对于实习生和新入职同事，有一点可以引入到团队中，每周发邮件记录心得总结，经验教训，以及学习成长；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;野生程序员&quot;&gt;&lt;a href=&quot;#野生程序员&quot; class=&quot;headerlink&quot; title=&quot;野生程序员&quot;&gt;&lt;/a&gt;野生程序员&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;该章节作者给出的建议是对于应届毕业生，最好先加入大公司，有较小的风险，有技术积累，能给出最佳实践，分工细致，技能专精，有服务海量用户的经验，软技能层面也能得到很好地锻炼，还可以积累一些不错的人脉；&lt;/p&gt;
&lt;p&gt;对于没有经验的毕业生，如果加入一些创业公司，确实可能有成长为野生程序员的风险，懂得知识面多，却样样不精通；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工程师事业指南&quot;&gt;&lt;a href=&quot;#工程师事业指南&quot; class=&quot;headerlink&quot; title=&quot;工程师事业指南&quot;&gt;&lt;/a&gt;工程师事业指南&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“声望”是一种日积月累的印象，不断积累声望，答应做到的事情，全部都要完成；如果问题非常棘手，讲出事实，寻求帮助；&lt;/p&gt;
&lt;p&gt;积累自己的作品集，把作品发布到GitHub上，不要因为自己的代码不够好而不开源，也可以使用GitHub Pages + Hexo搭建自己的静态网站，写博客；&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      对于研发工程师来说，`栈`就是在项目开发中所用到的技能，针对不同的项目，所用到的`栈`也是不尽相同的，例如移动端，Web端，PC客户端等，所使用的技能栈就会有所区别，移动端又分为原生应用开发（Android &amp;&amp; iOS）和基于WebView的Web App，当然还有Hybrid，这些又需要不同的技能栈来提供支持；
    
    </summary>
    
      <category term="思考总结" scheme="http://lpfweb.github.io/categories/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="全栈" scheme="http://lpfweb.github.io/tags/%E5%85%A8%E6%A0%88/"/>
    
      <category term="思考总结" scheme="http://lpfweb.github.io/tags/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
